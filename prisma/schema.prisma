// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum parentCategory {
  sticker
  tshirt
}

model user {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username String?
  email    String?
  phone    String?
  password String?
  address  String?
  orders   order[]
  cart     cart[]
  payment  payment[]
  avatar   avatar[]
  rating   rating[]
  wistlist wistlist[]

  @@unique([email, phone])
}

model category {
  id           Int            @id @default(autoincrement())
  parent       parentCategory
  categoryName String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sticker      sticker[]
}

model sticker {
  id           Int            @id @default(autoincrement())
  productName  String
  categoryId   Int
  category     category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  price        Int
  description  String
  offer        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  trending     Boolean        @default(false)
  image        image[]
  orderItem    orderItem[]
  cartItem     cartItem[]
  rating       rating[]
  wistlistItem wistlistItem[]
}

model image {
  id        Int     @id @default(autoincrement())
  url       String
  blurUrl   String
  height    Int
  width     Int
  sticker   sticker @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  stickerId Int
}

model avatar {
  id      Int    @id @default(autoincrement())
  url     String
  blurUrl String
  height  Int
  width   Int
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.Uuid
}

model order {
  id         Int         @id @default(autoincrement())
  user       user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.Uuid
  items      orderItem[]
  totalPrice Float
  address    String
  createdAt  DateTime    @default(now())
}

model orderItem {
  id        Int     @id @default(autoincrement())
  order     order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  sticker   sticker @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  stickerId Int
  quantity  Int
}

model cart {
  id     Int        @id @default(autoincrement())
  user   user       @relation(fields: [userId], references: [id])
  userId String     @db.Uuid
  items  cartItem[]
}

model cartItem {
  id        Int     @id @default(autoincrement())
  cart      cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  sticker   sticker @relation(fields: [stickerId], references: [id])
  stickerId Int
  quantity  Int
}

model payment {
  id        Int      @id @default(autoincrement())
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  amount    Float
  status    String
  createdAt DateTime @default(now())
}

model rating {
  id        String  @id @default(uuid()) @db.Uuid
  value     Int
  user      user    @relation(fields: [userId], references: [id])
  userId    String  @db.Uuid
  sticker   sticker @relation(fields: [stickerId], references: [id])
  stickerId Int
}

model wistlist {
  id     Int            @id @default(autoincrement())
  user   user           @relation(fields: [userId], references: [id])
  userId String         @db.Uuid
  items  wistlistItem[]
}

model wistlistItem {
  id         Int      @id @default(autoincrement())
  wistlist   wistlist @relation(fields: [wistlistId], references: [id])
  wistlistId Int
  sticker    sticker  @relation(fields: [stickerId], references: [id])
  stickerId  Int
}
