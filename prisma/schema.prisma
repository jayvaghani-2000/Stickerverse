// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum parentCategory {
  sticker
  tshirt
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String?
  email       String?       @unique
  phone       String?       @unique
  address     String?
  password    Boolean       @default(false)
  orders      order[]
  cart        cart[]
  payment     payment[]
  avatar      avatar[]
  rating      rating[]
  wistlist    wistlist[]
  userAddress userAddress[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  @@unique([email, phone])
}

model category {
  id           Int            @id @default(autoincrement())
  parent       parentCategory
  categoryName String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sticker      sticker[]
}

model sticker {
  id           Int            @id @default(autoincrement())
  productName  String
  categoryId   Int
  category     category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  price        Int
  description  String
  offer        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  trending     Boolean        @default(false)
  totalSell    Int            @default(0)
  image        image[]
  orderItem    orderItem[]
  cartItem     cartItem[]
  rating       rating[]
  wistlistItem wistlistItem[]
  slug         String         @unique
}

model image {
  id        Int     @id @default(autoincrement())
  url       String
  blurUrl   String
  height    Int
  width     Int
  sticker   sticker @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  stickerId Int
}

model avatar {
  id        Int      @id @default(autoincrement())
  url       String
  blurUrl   String
  height    Int
  width     Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model order {
  id         Int         @id @default(autoincrement())
  user       user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.Uuid
  items      orderItem[]
  totalPrice Float
  address    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model orderItem {
  id        Int      @id @default(autoincrement())
  order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  sticker   sticker  @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  stickerId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model cart {
  user      user       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @id @db.Uuid
  items     cartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model cartItem {
  id        Int          @id @default(autoincrement())
  cart      cart?        @relation(fields: [cartId], references: [userId], onDelete: Cascade)
  cartId    String?      @db.Uuid
  visitorId String?      @db.Uuid
  visitor   visitorCart? @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  sticker   sticker      @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  stickerId Int
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([cartId, stickerId])
  @@unique([visitorId, stickerId])
}

model visitorCart {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     cartItem[]
}

model payment {
  id        Int      @id @default(autoincrement())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model rating {
  id        String   @id @default(uuid()) @db.Uuid
  value     Int
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  sticker   sticker  @relation(fields: [stickerId], references: [id])
  stickerId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model wistlist {
  id        Int            @id @default(autoincrement())
  user      user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @db.Uuid
  items     wistlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model wistlistItem {
  id         Int      @id @default(autoincrement())
  wistlist   wistlist @relation(fields: [wistlistId], references: [id], onDelete: Cascade)
  wistlistId Int
  sticker    sticker  @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  stickerId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model userAddress {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  city       String
  address1   String
  address2   String?
  state      String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
